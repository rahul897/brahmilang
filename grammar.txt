statement : keyword:var identifier eq comp_expr
           : identifier eq comp_expr
           : com-expr ((and|or) comp_expr)*
com-expr : ne comp-expr
        : arith-expr ((ee|lt|lte|gte|ge) arith-expr)*

arith-expr : term ((plus|minus) term)*
term : factor ((mul|div) factor)*
factor: (plus|minus) factor | power
power: call (pow factor)*
call : atom (lparen (comp_expr (, comp_expr)*)? rparen)?
atom  : int|float| identifier
      : lparen arith-expr rparen
      : if-expr
      : while-expr
      : fun-def
if-expr: if comp-expr { statement} (elif {statement})* (else {statement})?
while-expr: while comp-expr { statement }
fun-def : fun identifier? lparen  (identifier (, identifier)*)? rparen { statement }